package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"gql-gen-errorhandling/graph/model"

	"github.com/99designs/gqlgen/graphql"
)

// Meow is the resolver for the meow field.
func (r *catResolver) Meow(ctx context.Context, obj *model.Cat) (string, error) {
	if obj.ID == "1" {
		graphql.AddError(ctx, fmt.Errorf("meow error. cat id: %s cannot meow.", obj.ID))
		return "meow unavailable", nil
	}

	res := fmt.Sprintf("%s the cat says meow.", obj.Name)

	return res, nil
}

// Bark is the resolver for the bark field.
func (r *dogResolver) Bark(ctx context.Context, obj *model.Dog) (string, error) {
	res := fmt.Sprintf("%s the dog says bark.", obj.Name)

	return res, nil
}

// Dogs is the resolver for the dogs field.
func (r *queryResolver) Dogs(ctx context.Context) ([]*model.Dog, error) {
	return TransformDogs(r.DogsData), nil
}

// Dog is the resolver for the dog field.
func (r *queryResolver) Dog(ctx context.Context, id string) (*model.Dog, error) {
	for _, dog := range r.DogsData {
		if dog.ID == id {
			return TransformDog(dog), nil
		}
	}

	return nil, fmt.Errorf("dog not found")
}

// Cats is the resolver for the cats field.
func (r *queryResolver) Cats(ctx context.Context) ([]*model.Cat, error) {
	return TransformCats(r.CatsData), nil
}

// Cat is the resolver for the cat field.
func (r *queryResolver) Cat(ctx context.Context, id string) (*model.Cat, error) {
	for _, cat := range r.CatsData {
		if cat.ID == id {
			return TransformCat(cat), nil
		}
	}

	return nil, fmt.Errorf("cat not found")
}

// Cat returns CatResolver implementation.
func (r *Resolver) Cat() CatResolver { return &catResolver{r} }

// Dog returns DogResolver implementation.
func (r *Resolver) Dog() DogResolver { return &dogResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type catResolver struct{ *Resolver }
type dogResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
